# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OtcbvT8Y1R_V_x25qhcFC9gU7V1G0r_r
"""

msg="Exercise A 0.1: Cinnamon buns with formating output"
def calculate_kanelbulle_cost(quantity):
  regular_price_per_bulle = 35  # SEK
  discount_percentage = 0.60

  regular_price = quantity * regular_price_per_bulle
  discount_amount = regular_price * discount_percentage
  total_price = regular_price - discount_amount

  return regular_price, discount_amount, total_price

if __name__ == "__main__":
  quantity = int(input("Dear Customer, please type how many day-old Kanelbulle you want ü•Æ "))

  regular_price, discount_amount, total_price = calculate_kanelbulle_cost(quantity)
  print("                                                   ")
  print("Welcome to fresh Swedish Kanelbulle Cinnamon Bakery")
  print("====================================================")
  print("-----Below are Kanelbulle Prices----")
  print("======================================")
  print(f"Regular Price:            {regular_price:.2f} SEK")
  print(f"Discounted Price:         {discount_amount:.2f} SEK")
  print("                          ============")
  print(f"Total Price:              {total_price:.2f}  SEK")
  print("                          ============")
  print("        Thank you for coming üòÄ")





msg="Exercise A 0.2: Dog years"
def human_to_dog_years(human_years):
  if human_years < 0:
    return -1  # Invalid input: Negative human years

  if human_years <= 2:
    return human_years * 10.5
  else:
    dog_years = 2 * 10.5 + (human_years - 2) * 4
    return dog_years

if __name__ == "__main__":
  human_years = int(input("Please type your Human üßî age in the box: "))

  dog_years = human_to_dog_years(human_years)

  if dog_years == -1:
    print("Error: oh no, Human age cannot be negative.")
  else:
    print("                                        ")
    print("===================================================")
    print("    Welcome to Human and Dog Age conversion App. ")
    print("===================================================")
    print("                                        ")
    print(f"{human_years} Human üßî years is similar to {dog_years:.1f} ü¶Æ Dog years.")
    print("                                        ")
    print("=== Thank's for using this App,hope to see you again===")

msg="Exercise A.0.4. Is it a prime number?"
import math

def is_prime(n):

  if n <= 1:
    return False

  # Optimization: Only check for divisors up to the square root of n
  for i in range(2, int(math.sqrt(n)) + 1):
    if n % i == 0:
      return False

  return True

if __name__ == "__main__":
  print("                        =========================================")
  print("                         Welcome to Integer determinator Program")
  print("                        =========================================")
  print("                                ")
  num = int(input("Please type an integer of your choice: "))


  if is_prime(num):

    print(f"{num}  ‚úÖ  is a  perfect prime number, youa are a genius üî£.")
  else:

    print(f"{num} ‚ùå is not a prime number sorry. Please try another integer number.")
    print("                                          ")
    print("            -----  üëç See you around soon ----- ")

"========== A.0.6. Shuffle the cards! (function) ========="
import random

def createDeck():

  suits = ['s', 'h', 'd', 'c']
  ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
  deck = []
  for suit in suits:
    for rank in ranks:
      deck.append(rank + suit)
  return deck

def shuffle(deck):
  """ Shuffles the given deck of cards in place."""
  original_deck = deck.copy()  # Create a copy of the original deck

  for i in range(len(deck)):
    # Bring up  a random index to swap with
    j = random.randint(0, len(deck) - 1)
    # Chnage over the elements at indices i and j
    deck[i], deck[j] = deck[j], deck[i]

  return original_deck, deck

if __name__ == "__main__":
  deck = createDeck()
  original_deck, shuffled_deck = shuffle(deck)
  print("                               ===============================")
  print("                               Welcome to card Shuffle App.üé∞ ")
  print("                               ===============================")
  print("                                                ")
  print("                                                ")
  print("Your Original Deck are :", original_deck)
  print("======================")
  print("                                                ")
  print("Now shuffled Deck looks like this:", shuffled_deck)
  print("=================================")
  print("          ")
  print("                          ----- Enjoyed it, come shuffle again üé± ------")



import math

def is_prime(n):
  "======== Exercise A.0.5. What is the next prime? (loop)========"

  if n <= 1:
    return False

  for i in range(2, int(math.sqrt(n)) + 1):
    if n % i == 0:
      return False

  return True

def nextPrime(n):

  """ The conditional statement below finds and returns the first prime number larger than n """

  next_num = n + 1
  while not is_prime(next_num):
    next_num += 1
  return next_num

if __name__ == "__main__":
  print("                             ============================")
  print("                               Next prime number program")
  print("                             ============================")
  print("                                                                      ")
  num = int(input("Dear User, please type an integer in the box "))
  next_prime_num = nextPrime(num)
  print("                                                            ")
  print(f"Hello user, the next prime number after {num} is: {next_prime_num}")
  print("                                        ===    ==")


  print("               It was fun, right ?  üßÆ  ")

import random

def simulate_coin_flips():

    " ======= Exercise A.0.3: Coin Flip - 3 same flips (loop)  ========== "
    flips = ""
    count = 0
    while True:
        count += 1
        flip = random.choice(["H", "T"])
        flips += flip
        if len(flips) >= 3 and flips[-3:] == "HHH":
            return flips, count
        elif len(flips) >= 3 and flips[-3:] == "TTT":
            return flips, count

if __name__ == "__main__":
    flips, count = simulate_coin_flips()
    print("===============================")
    print(" Welcome to Coin Flip App. ü™ô")
    print("===============================")
    print("                               ")
    print("                               ")
    print("All coin Flips Result:", flips)
    print("                               ")
    print("                               ")
    print("                         =====")
    print("Total number of flips is:", count)
    print("                         =====")
    print("                               ")
    print(" Happy flipping üÉè ")

msg="Exercise A.0.2: Deal cards"
import random

def create_deck():

  suits = ['s', 'h', 'd', 'c']
  ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
  deck = [rank + suit for rank in ranks for suit in suits]
  return deck

def shuffle_deck(deck):
  """ Shuffles the given deck of cards in place. """
  random.shuffle(deck)

def deal(num_hands, cards_per_hand, deck):

  """ Deals cards to a specified number of hands. """

  hands = [[] for _ in range(num_hands)]  # Create empty lists for each hand
  for i in range(cards_per_hand):
    for j in range(num_hands):
      if deck:  # Check if deck is not empty
        hands[j].append(deck.pop(0))  # Deal one card to each hand
  return hands

if __name__ == "__main__":
  # Create and shuffle the deck
  deck = create_deck()
  shuffle_deck(deck)
  print("          ============================    ")
  print("           Welcome to  Card deal App")
  print("          ============================    ")
  # Get user input for number of hands and cards per hand
  num_hands = int(input("Please type the number of hands: "))
  cards_per_hand = int(input("Please the number of cards per hand: "))
  print("                                                    ")
  print("Combination result    ")
  print("==================    ")
  print("                                                    ")

  # Deal the cards
  hands = deal(num_hands, cards_per_hand, deck)

  # Print the dealt hands
  for i, hand in enumerate(hands):

    print(f"Hand {i+1}: {hand}")

    print(f"Hand {i+1}: {hand}")
    print("======")
    print("                        ")